// Service Worker for Portfolio PWA
const CACHE_NAME = 'adil-portfolio-v1.0.0';
const STATIC_CACHE_URLS = [
  '/',
  '/manifest.json',
  '/favicon.ico',
  '/android-chrome-192x192.png',
  '/android-chrome-512x512.png',
  '/apple-touch-icon.png',
  '/images/adil.jpg',
  // Add critical CSS and JS files - these will be auto-generated by Next.js
];

// Install event - cache static assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('🚀 Service Worker: Caching static assets');
        return cache.addAll(STATIC_CACHE_URLS);
      })
      .catch((error) => {
        console.error('❌ Service Worker: Failed to cache assets', error);
      })
  );
  self.skipWaiting();
});

// Activate event - clean up old caches
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheName !== CACHE_NAME) {
            console.log('🧹 Service Worker: Deleting old cache', cacheName);
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
  self.clients.claim();
});

// Fetch event - serve from cache with network fallback
self.addEventListener('fetch', (event) => {
  // Skip non-GET requests and chrome-extension requests
  if (event.request.method !== 'GET' || event.request.url.startsWith('chrome-extension')) {
    return;
  }

  event.respondWith(
    caches.match(event.request)
      .then((cachedResponse) => {
        // Return cached version if available
        if (cachedResponse) {
          console.log('📦 Service Worker: Serving from cache', event.request.url);
          return cachedResponse;
        }

        // Network first for API calls and dynamic content
        if (event.request.url.includes('/api/') || event.request.url.includes('analytics')) {
          return fetch(event.request)
            .catch(() => {
              // Return offline page for API failures
              if (event.request.url.includes('/api/')) {
                return new Response(
                  JSON.stringify({ message: 'Offline - please try again when connected' }), 
                  { 
                    headers: { 'Content-Type': 'application/json' },
                    status: 200 
                  }
                );
              }
            });
        }

        // Cache first strategy for static assets
        return fetch(event.request)
          .then((response) => {
            // Only cache successful responses
            if (response.status === 200) {
              const responseClone = response.clone();
              caches.open(CACHE_NAME)
                .then((cache) => {
                  cache.put(event.request, responseClone);
                });
            }
            return response;
          })
          .catch(() => {
            // Return offline fallback for navigation requests
            if (event.request.mode === 'navigate') {
              return caches.match('/');
            }
          });
      })
  );
});

// Background sync for analytics (when network is restored)
self.addEventListener('sync', (event) => {
  if (event.tag === 'analytics-sync') {
    event.waitUntil(
      // Sync pending analytics data when network is available
      syncAnalytics()
    );
  }
});

async function syncAnalytics() {
  try {
    // Get pending analytics data from IndexedDB or localStorage
    const pendingData = await getPendingAnalytics();
    
    if (pendingData && pendingData.length > 0) {
      for (const data of pendingData) {
        await fetch('/api/analytics', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });
      }
      // Clear pending data after successful sync
      await clearPendingAnalytics();
      console.log('📊 Service Worker: Analytics synced successfully');
    }
  } catch (error) {
    console.error('❌ Service Worker: Analytics sync failed', error);
  }
}

// Helper functions for analytics sync
async function getPendingAnalytics() {
  // Implementation would depend on your storage strategy
  return [];
}

async function clearPendingAnalytics() {
  // Implementation would depend on your storage strategy
  return Promise.resolve();
}

// Push notification handler (for future use)
self.addEventListener('push', (event) => {
  if (event.data) {
    const data = event.data.json();
    const options = {
      body: data.body,
      icon: '/android-chrome-192x192.png',
      badge: '/favicon-32x32.png',
      tag: 'portfolio-notification',
      data: data.url,
      actions: [
        {
          action: 'view',
          title: 'View',
          icon: '/favicon-32x32.png'
        }
      ]
    };

    event.waitUntil(
      self.registration.showNotification(data.title, options)
    );
  }
});

// Notification click handler
self.addEventListener('notificationclick', (event) => {
  event.notification.close();

  if (event.action === 'view' || !event.action) {
    event.waitUntil(
      clients.openWindow(event.notification.data || '/')
    );
  }
});

console.log('✅ Service Worker: Registered and ready');